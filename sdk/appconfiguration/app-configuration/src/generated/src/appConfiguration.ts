/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { AppConfigurationContext } from "./appConfigurationContext";
import {
  AppConfigurationOptionalParams,
  ApiVersion10,
  AppConfigurationGetKeysOptionalParams,
  AppConfigurationGetKeysResponse,
  AppConfigurationCheckKeysOptionalParams,
  AppConfigurationCheckKeysResponse,
  AppConfigurationGetKeyValuesOptionalParams,
  AppConfigurationGetKeyValuesResponse,
  AppConfigurationCheckKeyValuesOptionalParams,
  AppConfigurationCheckKeyValuesResponse,
  AppConfigurationGetKeyValueOptionalParams,
  AppConfigurationGetKeyValueResponse,
  AppConfigurationPutKeyValueOptionalParams,
  AppConfigurationPutKeyValueResponse,
  AppConfigurationDeleteKeyValueOptionalParams,
  AppConfigurationDeleteKeyValueResponse,
  AppConfigurationCheckKeyValueOptionalParams,
  AppConfigurationCheckKeyValueResponse,
  AppConfigurationGetLabelsOptionalParams,
  AppConfigurationGetLabelsResponse,
  AppConfigurationCheckLabelsOptionalParams,
  AppConfigurationCheckLabelsResponse,
  AppConfigurationPutLockOptionalParams,
  AppConfigurationPutLockResponse,
  AppConfigurationDeleteLockOptionalParams,
  AppConfigurationDeleteLockResponse,
  AppConfigurationGetRevisionsOptionalParams,
  AppConfigurationGetRevisionsResponse,
  AppConfigurationCheckRevisionsOptionalParams,
  AppConfigurationCheckRevisionsResponse,
  AppConfigurationGetKeysNextOptionalParams,
  AppConfigurationGetKeysNextResponse,
  AppConfigurationGetKeyValuesNextOptionalParams,
  AppConfigurationGetKeyValuesNextResponse,
  AppConfigurationGetLabelsNextOptionalParams,
  AppConfigurationGetLabelsNextResponse,
  AppConfigurationGetRevisionsNextOptionalParams,
  AppConfigurationGetRevisionsNextResponse
} from "./models";

/** @internal */
export class AppConfiguration extends AppConfigurationContext {
  /**
   * Initializes a new instance of the AppConfiguration class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint The endpoint of the App Configuration instance to send requests to.
   * @param apiVersion Api Version
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    endpoint: string,
    apiVersion: ApiVersion10,
    options?: AppConfigurationOptionalParams
  ) {
    super(credentials, endpoint, apiVersion, options);
  }

  /**
   * Gets a list of keys.
   * @param options The options parameters.
   */
  getKeys(
    options?: AppConfigurationGetKeysOptionalParams
  ): Promise<AppConfigurationGetKeysResponse> {
    return this.sendOperationRequest({ options }, getKeysOperationSpec);
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkKeys(
    options?: AppConfigurationCheckKeysOptionalParams
  ): Promise<AppConfigurationCheckKeysResponse> {
    return this.sendOperationRequest({ options }, checkKeysOperationSpec);
  }

  /**
   * Gets a list of key-values.
   * @param options The options parameters.
   */
  getKeyValues(
    options?: AppConfigurationGetKeyValuesOptionalParams
  ): Promise<AppConfigurationGetKeyValuesResponse> {
    return this.sendOperationRequest({ options }, getKeyValuesOperationSpec);
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkKeyValues(
    options?: AppConfigurationCheckKeyValuesOptionalParams
  ): Promise<AppConfigurationCheckKeyValuesResponse> {
    return this.sendOperationRequest({ options }, checkKeyValuesOperationSpec);
  }

  /**
   * Gets a single key-value.
   * @param key The key of the key-value to retrieve.
   * @param options The options parameters.
   */
  getKeyValue(
    key: string,
    options?: AppConfigurationGetKeyValueOptionalParams
  ): Promise<AppConfigurationGetKeyValueResponse> {
    return this.sendOperationRequest(
      { key, options },
      getKeyValueOperationSpec
    );
  }

  /**
   * Creates a key-value.
   * @param key The key of the key-value to create.
   * @param options The options parameters.
   */
  putKeyValue(
    key: string,
    options?: AppConfigurationPutKeyValueOptionalParams
  ): Promise<AppConfigurationPutKeyValueResponse> {
    return this.sendOperationRequest(
      { key, options },
      putKeyValueOperationSpec
    );
  }

  /**
   * Deletes a key-value.
   * @param key The key of the key-value to delete.
   * @param options The options parameters.
   */
  deleteKeyValue(
    key: string,
    options?: AppConfigurationDeleteKeyValueOptionalParams
  ): Promise<AppConfigurationDeleteKeyValueResponse> {
    return this.sendOperationRequest(
      { key, options },
      deleteKeyValueOperationSpec
    );
  }

  /**
   * Requests the headers and status of the given resource.
   * @param key The key of the key-value to retrieve.
   * @param options The options parameters.
   */
  checkKeyValue(
    key: string,
    options?: AppConfigurationCheckKeyValueOptionalParams
  ): Promise<AppConfigurationCheckKeyValueResponse> {
    return this.sendOperationRequest(
      { key, options },
      checkKeyValueOperationSpec
    );
  }

  /**
   * Gets a list of labels.
   * @param options The options parameters.
   */
  getLabels(
    options?: AppConfigurationGetLabelsOptionalParams
  ): Promise<AppConfigurationGetLabelsResponse> {
    return this.sendOperationRequest({ options }, getLabelsOperationSpec);
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkLabels(
    options?: AppConfigurationCheckLabelsOptionalParams
  ): Promise<AppConfigurationCheckLabelsResponse> {
    return this.sendOperationRequest({ options }, checkLabelsOperationSpec);
  }

  /**
   * Locks a key-value.
   * @param key The key of the key-value to lock.
   * @param options The options parameters.
   */
  putLock(
    key: string,
    options?: AppConfigurationPutLockOptionalParams
  ): Promise<AppConfigurationPutLockResponse> {
    return this.sendOperationRequest({ key, options }, putLockOperationSpec);
  }

  /**
   * Unlocks a key-value.
   * @param key The key of the key-value to unlock.
   * @param options The options parameters.
   */
  deleteLock(
    key: string,
    options?: AppConfigurationDeleteLockOptionalParams
  ): Promise<AppConfigurationDeleteLockResponse> {
    return this.sendOperationRequest({ key, options }, deleteLockOperationSpec);
  }

  /**
   * Gets a list of key-value revisions.
   * @param options The options parameters.
   */
  getRevisions(
    options?: AppConfigurationGetRevisionsOptionalParams
  ): Promise<AppConfigurationGetRevisionsResponse> {
    return this.sendOperationRequest({ options }, getRevisionsOperationSpec);
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkRevisions(
    options?: AppConfigurationCheckRevisionsOptionalParams
  ): Promise<AppConfigurationCheckRevisionsResponse> {
    return this.sendOperationRequest({ options }, checkRevisionsOperationSpec);
  }

  /**
   * GetKeysNext
   * @param nextLink The nextLink from the previous successful call to the GetKeys method.
   * @param options The options parameters.
   */
  getKeysNext(
    nextLink: string,
    options?: AppConfigurationGetKeysNextOptionalParams
  ): Promise<AppConfigurationGetKeysNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      getKeysNextOperationSpec
    );
  }

  /**
   * GetKeyValuesNext
   * @param nextLink The nextLink from the previous successful call to the GetKeyValues method.
   * @param options The options parameters.
   */
  getKeyValuesNext(
    nextLink: string,
    options?: AppConfigurationGetKeyValuesNextOptionalParams
  ): Promise<AppConfigurationGetKeyValuesNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      getKeyValuesNextOperationSpec
    );
  }

  /**
   * GetLabelsNext
   * @param nextLink The nextLink from the previous successful call to the GetLabels method.
   * @param options The options parameters.
   */
  getLabelsNext(
    nextLink: string,
    options?: AppConfigurationGetLabelsNextOptionalParams
  ): Promise<AppConfigurationGetLabelsNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      getLabelsNextOperationSpec
    );
  }

  /**
   * GetRevisionsNext
   * @param nextLink The nextLink from the previous successful call to the GetRevisions method.
   * @param options The options parameters.
   */
  getRevisionsNext(
    nextLink: string,
    options?: AppConfigurationGetRevisionsNextOptionalParams
  ): Promise<AppConfigurationGetRevisionsNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      getRevisionsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getKeysOperationSpec: coreClient.OperationSpec = {
  path: "/keys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult,
      headersMapper: Mappers.AppConfigurationGetKeysHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.accept,
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  serializer
};
const checkKeysOperationSpec: coreClient.OperationSpec = {
  path: "/keys",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AppConfigurationCheckKeysHeaders
    },
    default: {}
  },
  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getKeyValuesOperationSpec: coreClient.OperationSpec = {
  path: "/kv",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AppConfigurationGetKeyValuesHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept1
  ],
  serializer
};
const checkKeyValuesOperationSpec: coreClient.OperationSpec = {
  path: "/kv",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AppConfigurationCheckKeyValuesHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select1
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getKeyValueOperationSpec: coreClient.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AppConfigurationGetKeyValueHeaders
    },
    304: {
      headersMapper: Mappers.AppConfigurationGetKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.label,
    Parameters.select2
  ],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept2,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const putKeyValueOperationSpec: coreClient.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AppConfigurationPutKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.entity,
  queryParameters: [Parameters.apiVersion, Parameters.label],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.accept2,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
const deleteKeyValueOperationSpec: coreClient.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AppConfigurationDeleteKeyValueHeaders
    },
    204: {
      headersMapper: Mappers.AppConfigurationDeleteKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.label],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.accept2,
    Parameters.ifMatch
  ],
  serializer
};
const checkKeyValueOperationSpec: coreClient.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AppConfigurationCheckKeyValueHeaders
    },
    304: {
      headersMapper: Mappers.AppConfigurationCheckKeyValueHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.label,
    Parameters.select3
  ],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const getLabelsOperationSpec: coreClient.OperationSpec = {
  path: "/labels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabelListResult,
      headersMapper: Mappers.AppConfigurationGetLabelsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select4
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept3
  ],
  serializer
};
const checkLabelsOperationSpec: coreClient.OperationSpec = {
  path: "/labels",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AppConfigurationCheckLabelsHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select4
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const putLockOperationSpec: coreClient.OperationSpec = {
  path: "/locks/{key}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AppConfigurationPutLockHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.label],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.accept2,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const deleteLockOperationSpec: coreClient.OperationSpec = {
  path: "/locks/{key}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AppConfigurationDeleteLockHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.label],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.accept2,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const getRevisionsOperationSpec: coreClient.OperationSpec = {
  path: "/revisions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AppConfigurationGetRevisionsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select5
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept1
  ],
  serializer
};
const checkRevisionsOperationSpec: coreClient.OperationSpec = {
  path: "/revisions",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AppConfigurationCheckRevisionsHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select6
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getKeysNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult,
      headersMapper: Mappers.AppConfigurationGetKeysNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  serializer
};
const getKeyValuesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AppConfigurationGetKeyValuesNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept1
  ],
  serializer
};
const getLabelsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabelListResult,
      headersMapper: Mappers.AppConfigurationGetLabelsNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select4
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept3
  ],
  serializer
};
const getRevisionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AppConfigurationGetRevisionsNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select5
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept1
  ],
  serializer
};
